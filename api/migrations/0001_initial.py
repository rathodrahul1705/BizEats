# Generated by Django 4.2.20 on 2025-03-26 07:02

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('full_name', models.CharField(max_length=255)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('contact_number', models.CharField(blank=True, max_length=15, null=True, unique=True)),
                ('user_verified', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('role', models.PositiveSmallIntegerField(choices=[(1, 'Customer'), (2, 'Admin'), (3, 'Vendor')], default=1)),
                ('is_active', models.BooleanField(default=True)),
                ('otp', models.CharField(blank=True, max_length=6, null=True)),
                ('otp_expiry', models.DateTimeField(blank=True, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'db_table': 'users',
            },
        ),
        migrations.CreateModel(
            name='Order',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order_number', models.CharField(max_length=20, unique=True)),
                ('order_date', models.DateTimeField(auto_now_add=True)),
                ('delivery_date', models.DateTimeField(blank=True, null=True)),
                ('status', models.PositiveSmallIntegerField(choices=[(1, 'Pending'), (2, 'Confirmed'), (3, 'Preparing'), (4, 'Ready for Delivery/Pickup'), (5, 'On the Way'), (6, 'Delivered'), (7, 'Cancelled'), (8, 'Refunded')], default=1)),
                ('payment_status', models.PositiveSmallIntegerField(choices=[(1, 'in progress'), (2, 'Pending'), (3, 'Refunded'), (4, 'Failed'), (5, 'Completed')], default=1)),
                ('payment_method', models.PositiveSmallIntegerField(choices=[(1, 'Credit Card'), (2, 'Debit Card'), (3, 'UPI'), (4, 'Net Banking'), (5, 'Cash on Delivery')])),
                ('subtotal', models.DecimalField(decimal_places=2, max_digits=10)),
                ('tax', models.DecimalField(decimal_places=2, max_digits=10, null=True)),
                ('delivery_fee', models.DecimalField(decimal_places=2, max_digits=10, null=True)),
                ('total_amount', models.DecimalField(decimal_places=2, max_digits=10, null=True)),
                ('quantity', models.PositiveIntegerField()),
                ('special_instructions', models.TextField(blank=True, null=True)),
                ('is_takeaway', models.BooleanField(default=False, null=True)),
                ('preparation_time', models.PositiveSmallIntegerField(help_text='Estimated minutes for preparation', null=True)),
                ('special_requests', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'order_details',
                'ordering': ['-order_date'],
            },
        ),
        migrations.CreateModel(
            name='Payment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('payment_gateway', models.PositiveSmallIntegerField(choices=[(1, 'Razorpay'), (2, 'Stripe'), (3, 'PayPal'), (4, 'Cash on Delivery')])),
                ('payment_method', models.PositiveSmallIntegerField(choices=[(1, 'Credit Card'), (2, 'Debit Card'), (3, 'UPI'), (4, 'Net Banking'), (5, 'Cash on Delivery')])),
                ('status', models.PositiveSmallIntegerField(choices=[(1, 'Created'), (2, 'Attempted'), (3, 'Pending'), (4, 'Authorized'), (5, 'Captured'), (6, 'Failed'), (7, 'Refunded'), (8, 'Partially Refunded')], default=1)),
                ('razorpay_payment_id', models.CharField(blank=True, max_length=100, null=True)),
                ('razorpay_order_id', models.CharField(blank=True, max_length=100, null=True)),
                ('razorpay_signature', models.CharField(blank=True, max_length=255, null=True)),
                ('amount', models.DecimalField(decimal_places=2, max_digits=10)),
                ('currency', models.CharField(default='INR', max_length=3)),
                ('gateway_fee', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('tax_on_fee', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('captured_at', models.DateTimeField(blank=True, null=True)),
                ('invoice_number', models.CharField(blank=True, max_length=50, null=True)),
                ('notes', models.TextField(blank=True, null=True)),
                ('raw_response', models.JSONField(blank=True, null=True)),
                ('order', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='payments', to='api.order')),
            ],
            options={
                'db_table': 'payment_details',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='RestaurantCuisine',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cuisine_name', models.CharField(max_length=100)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'restaurant_cuisines',
            },
        ),
        migrations.CreateModel(
            name='RestaurantMaster',
            fields=[
                ('restaurant_id', models.CharField(max_length=20, primary_key=True, serialize=False, unique=True)),
                ('restaurant_name', models.CharField(max_length=255)),
                ('restaurant_status', models.PositiveSmallIntegerField(choices=[(1, 'Active'), (2, 'Inactive')])),
                ('profile_image', models.ImageField(blank=True, null=True, upload_to='restaurant_profile_images/')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'restaurent_masters',
            },
        ),
        migrations.CreateModel(
            name='UserDeliveryAddress',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('street_address', models.CharField(max_length=255)),
                ('city', models.CharField(max_length=100)),
                ('state', models.CharField(max_length=100)),
                ('zip_code', models.CharField(max_length=20)),
                ('country', models.CharField(max_length=100)),
                ('near_by_landmark', models.CharField(blank=True, max_length=255, null=True)),
                ('home_type', models.CharField(choices=[('Home', 'Home'), ('Office', 'Office'), ('Other', 'Other')], default='Home', max_length=10)),
                ('latitude', models.DecimalField(blank=True, decimal_places=6, max_digits=9, null=True)),
                ('longitude', models.DecimalField(blank=True, decimal_places=6, max_digits=9, null=True)),
                ('is_default', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='delivery_addresses', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'user_delivery_address',
            },
        ),
        migrations.CreateModel(
            name='RestaurantOwnerDetail',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('owner_name', models.CharField(max_length=255)),
                ('owner_email_address', models.EmailField(max_length=255)),
                ('owner_contact', models.CharField(blank=True, max_length=15, null=True)),
                ('owner_primary_contact', models.CharField(blank=True, max_length=15, null=True)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('restaurant', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='owner_details', to='api.restaurantmaster')),
            ],
            options={
                'db_table': 'restaurant_owner_details',
            },
        ),
        migrations.CreateModel(
            name='RestaurantMenu',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('item_name', models.CharField(max_length=255)),
                ('item_price', models.DecimalField(decimal_places=2, max_digits=6)),
                ('description', models.TextField()),
                ('category', models.CharField(choices=[('Appetizer', 'Appetizer'), ('Main Course', 'Main Course'), ('Dessert', 'Dessert'), ('Beverage', 'Beverage')], max_length=20)),
                ('item_image', models.ImageField(blank=True, null=True, upload_to='menu_images/')),
                ('spice_level', models.CharField(choices=[('Mild', 'Mild'), ('Medium', 'Medium'), ('Spicy', 'Spicy'), ('Extra Spicy', 'Extra Spicy')], max_length=20)),
                ('preparation_time', models.PositiveIntegerField(help_text='Estimated time in minutes')),
                ('serving_size', models.CharField(choices=[('Small', 'Small'), ('Medium', 'Medium'), ('Large', 'Large')], max_length=10)),
                ('availability', models.BooleanField(default=True)),
                ('stock_quantity', models.PositiveIntegerField(default=0)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('cuisines', models.ManyToManyField(related_name='menu_items', to='api.restaurantcuisine')),
                ('restaurant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='menu_items', to='api.restaurantmaster')),
            ],
            options={
                'db_table': 'restaurant_menu',
            },
        ),
        migrations.CreateModel(
            name='RestaurantLocation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('shop_no_building', models.CharField(blank=True, max_length=255, null=True)),
                ('floor_tower', models.CharField(blank=True, max_length=255, null=True)),
                ('area_sector_locality', models.CharField(max_length=255)),
                ('city', models.CharField(max_length=100)),
                ('nearby_locality', models.CharField(blank=True, max_length=255, null=True)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('restaurant', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='restaurant_location', to='api.restaurantmaster')),
            ],
            options={
                'db_table': 'restaurant_location_details',
            },
        ),
        migrations.CreateModel(
            name='RestaurantDocuments',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('pan_number', models.CharField(max_length=20)),
                ('name_as_per_pan', models.CharField(max_length=255)),
                ('registered_business_address', models.TextField()),
                ('pan_image', models.ImageField(blank=True, null=True, upload_to='pan_images/')),
                ('fssai_number', models.CharField(max_length=50)),
                ('fssai_expiry_date', models.DateField()),
                ('fssai_licence_image', models.ImageField(blank=True, null=True, upload_to='fssai_images/')),
                ('bank_account_number', models.CharField(max_length=20)),
                ('bank_account_ifsc_code', models.CharField(max_length=20)),
                ('bank_account_type', models.PositiveSmallIntegerField(choices=[(1, 'Saving'), (2, 'Current')])),
                ('partner_contract_doc', models.FileField(blank=True, null=True, upload_to='partner_contracts/')),
                ('is_contract_checked', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('restaurant', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='documents', to='api.restaurantmaster')),
            ],
            options={
                'db_table': 'restaurant_documents',
            },
        ),
        migrations.CreateModel(
            name='RestaurantDeliveryTiming',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('day', models.CharField(max_length=10)),
                ('open', models.BooleanField(default=False)),
                ('start_time', models.TimeField(blank=True, null=True)),
                ('end_time', models.TimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('restaurant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='delivery_timings', to='api.restaurantmaster')),
            ],
            options={
                'db_table': 'restaurant_delivery_timings',
            },
        ),
        migrations.AddField(
            model_name='restaurantcuisine',
            name='restaurant',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='cuisines', to='api.restaurantmaster'),
        ),
        migrations.CreateModel(
            name='Refund',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.PositiveSmallIntegerField(choices=[(1, 'Requested'), (2, 'Processing'), (3, 'Processed'), (4, 'Failed')], default=1)),
                ('reason', models.PositiveSmallIntegerField(choices=[(1, 'Order Cancelled'), (2, 'Customer Request'), (3, 'Duplicate Payment'), (4, 'Fraudulent Transaction'), (5, 'Product Not Available'), (6, 'Other')])),
                ('amount', models.DecimalField(decimal_places=2, max_digits=10)),
                ('razorpay_refund_id', models.CharField(blank=True, max_length=100, null=True)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('processed_at', models.DateTimeField(blank=True, null=True)),
                ('notes', models.TextField(blank=True, null=True)),
                ('raw_response', models.JSONField(blank=True, null=True)),
                ('initiated_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('order', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='refunds', to='api.order')),
                ('payment', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='refunds', to='api.payment')),
            ],
            options={
                'db_table': 'refund_details',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='OrderStatusLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.PositiveSmallIntegerField(choices=[(1, 'Pending'), (2, 'Confirmed'), (3, 'Preparing'), (4, 'Ready for Delivery/Pickup'), (5, 'On the Way'), (6, 'Delivered'), (7, 'Cancelled'), (8, 'Refunded')])),
                ('notes', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('order', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='status_logs', to='api.order')),
            ],
            options={
                'db_table': 'order_status_logs',
                'ordering': ['-created_at'],
            },
        ),
        migrations.AddField(
            model_name='order',
            name='delivery_address',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='api.userdeliveryaddress'),
        ),
        migrations.AddField(
            model_name='order',
            name='restaurant',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='api.restaurantmaster'),
        ),
        migrations.AddField(
            model_name='order',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='orders', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='Cart',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('session_id', models.CharField(blank=True, max_length=255, null=True)),
                ('order_number', models.CharField(max_length=20, unique=True)),
                ('quantity', models.PositiveIntegerField(default=1)),
                ('cart_status', models.PositiveIntegerField(choices=[(1, 'Item Added'), (2, 'Proceeded for Checkout'), (3, 'Address Updated'), (4, 'Proceeded for Payment'), (5, 'Payment Completed')], default=1)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='carts', to='api.restaurantmenu')),
                ('restaurant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='carts', to='api.restaurantmaster')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='carts', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'carts',
            },
        ),
    ]
